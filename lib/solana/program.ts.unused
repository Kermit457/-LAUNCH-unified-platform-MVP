import { Program, AnchorProvider, Idl, BN, web3 } from '@coral-xyz/anchor';
import { PublicKey, SystemProgram } from '@solana/web3.js';
import { CURVE_PROGRAM_ID, connection } from './config';
import IDL from '../idl/launchos_curve.json';

export type LaunchosCurveProgram = Program<Idl>;

export function getCurveProgram(wallet: any): LaunchosCurveProgram {
  const provider = new AnchorProvider(connection, wallet, { commitment: 'confirmed' });
  return new Program(IDL as unknown as Idl, provider);
}

export function getCurvePDA(twitterHandle: string): PublicKey {
  const [pda] = PublicKey.findProgramAddressSync(
    [Buffer.from('curve'), Buffer.from(twitterHandle)],
    CURVE_PROGRAM_ID
  );
  return pda;
}

export function getReserveVaultPDA(curve: PublicKey): PublicKey {
  const [pda] = PublicKey.findProgramAddressSync(
    [Buffer.from('reserve'), curve.toBuffer()],
    CURVE_PROGRAM_ID
  );
  return pda;
}

export function getKeyHolderPDA(curve: PublicKey, wallet: PublicKey): PublicKey {
  const [pda] = PublicKey.findProgramAddressSync(
    [Buffer.from('holder'), curve.toBuffer(), wallet.toBuffer()],
    CURVE_PROGRAM_ID
  );
  return pda;
}

export function getConfigPDA(): PublicKey {
  const [pda] = PublicKey.findProgramAddressSync([Buffer.from('config')], CURVE_PROGRAM_ID);
  return pda;
}

export function getBanListPDA(): PublicKey {
  const [pda] = PublicKey.findProgramAddressSync([Buffer.from('ban_list')], CURVE_PROGRAM_ID);
  return pda;
}

/**
 * Fetch and deserialize a bonding curve account
 */
export async function fetchCurveAccount(twitterHandle: string): Promise<any | null> {
  try {
    const curvePda = getCurvePDA(twitterHandle);
    const accountInfo = await connection.getAccountInfo(curvePda);

    if (!accountInfo) {
      return null;
    }

    // Parse the account data using Anchor's account layout
    // The data starts after the 8-byte discriminator
    const data = accountInfo.data;

    // For proper deserialization, we'd use the program's coder
    // For now, return raw account info indicating it exists
    return {
      exists: true,
      publicKey: curvePda,
      data: accountInfo.data,
    };
  } catch (error) {
    console.error('Error fetching curve account:', error);
    return null;
  }
}

/**
 * Deserialize curve account data properly using Anchor
 */
export async function deserializeCurveAccount(program: LaunchosCurveProgram, curvePda: PublicKey) {
  try {
    const curveAccount = await program.account.bondingCurve.fetch(curvePda);
    return curveAccount;
  } catch (error) {
    console.error('Error deserializing curve account:', error);
    return null;
  }
}
